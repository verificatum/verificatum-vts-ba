// Copyright 2008-2022 Douglas Wikstrom
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import process from 'process';

export namespace verificatum {

    export namespace devnode {

	import WORDSIZE = verificatum.arithm.uli.WORDSIZE;
	import wasm = verificatum.arithm.uli.wasm;
        import NodeRandomDevice = verificatum.node.NodeRandomDevice;
        import RandomSource = verificatum.base.RandomSource;

        import TestContext = verificatum.dev.test.TestContext;
        import test_arithm = verificatum.dev.test.arithm.test_arithm;

	import AbstractSuite = verificatum.dev.bench.util.AbstractSuite;
	import ArithmSuite = verificatum.dev.bench.arithm.ArithmSuite;

        /**
         * Testing and timing functions.
         */
        export class NodeTestContext extends TestContext {

            /**
             * Creates a context with a given random source.
             *
             * @param testTime - Regulates the running time of testing.
             * @param randomSource - Source of randomness.
             * @param statDist - Statistical distance.
             */
            constructor(testTime: size_t,
                        randomSource: RandomSource,
                        statDist: size_t) {
                super(testTime, randomSource, statDist);
            }

            write(s: string) : void {
                process.stdout.write(s);
            }

            writenl(s: string) : void {
                this.write(s + "\n");
            }

            /**
             * Exit aggressively.
             */
            exit(exitCode: int32_t) : void {
                process.exit(exitCode);
            }
        }

        const statDist: size_t = 50;

        export function cli() {
            const operation: string = process.argv[2];

            const randomSource: RandomSource = new NodeRandomDevice();

            if (operation == "test") {

                const testTime: size_t = parseInt(process.argv[3]);
                const ntc: NodeTestContext =
                      new NodeTestContext(testTime, randomSource, statDist);

                process.stdout.write(`\nTest VTS-BA in Node\n`);

                test_arithm(ntc);

            } else if (operation == "bench_arithm") {

		const maxWidth: size_t = 3;
		const minSamples: size_t = 7;

		let suite: AbstractSuite =
		    new ArithmSuite(statDist, maxWidth, "txt");

		process.stdout.write("\nBenchmarks for VTS-BA in Node");
		process.stdout.write(`\nWORDSIZE=${WORDSIZE}\nWASM=${wasm}\n`);

		const bm: string[] = suite.benchmarks();

		for (let i: size_t = 0; i < bm.length; i++) {
		    const s: string = "Benchmark: " + bm[i];
		    process.stdout.write("\n" + s + "\n");
		    process.stdout.write("".padStart(s.length, "-") + "\n");
		    process.stdout.write(suite.bench(bm[i], minSamples)[1]);
		}
            }
        }
    }
}
