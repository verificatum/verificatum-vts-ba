// Copyright 2008-2022 Douglas Wikstrom
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

export namespace verificatum {

    export namespace devdom {
        import RandomSource = verificatum.base.RandomSource;
        import SHA256PRG = verificatum.crypto.SHA256PRG;
        import Suite = verificatum.dev.bench.Suite;
        import TestContext = verificatum.dev.test.TestContext;
        import asciiToByteArray = verificatum.base.asciiToByteArray;
        import test_verificatum = verificatum.dev.test.test_verificatum;

        /**
         * Wrapper of code to be used in a WebWorker thread for benchmarking.
         * Depending on packaging it may be needed to patch the code.
         */
        export const benchworker = function(): void {

            const statDist: size_t = 50;
            const maxWidth: size_t = 4;
            const minSamples: size_t = 3;

            let suite: Suite;

            /* eslint-disable @typescript-eslint/explicit-function-return-type */
            onmessage = function(e: MessageEvent) {

                const command: string = e.data[0];

                if (command == "initialize") {

                    const root: string = e.data[1];
                    const script: string = e.data[2];
                    const seed: string = e.data[3];

                    importScripts(root + "/" + script);

                    suite = new Suite(statDist, maxWidth, seed, "html");

                    postMessage([command]);

                } else {

                    postMessage(suite.bench(command, minSamples));
                }
            };
            /* eslint-enable @typescript-eslint/explicit-function-return-type */
        };

        /**
         * Wrapper of code to be used in a WebWorker thread for testing.
         * Depending on packaging it may be needed to patch the code.
         */
        export const testworker = function(): void {

            const statDist: size_t = 50;

            /* eslint-disable @typescript-eslint/explicit-function-return-type */
            onmessage = function(e: MessageEvent) {

                const command: string = e.data[0];

                if (command == "initialize") {

                    const root: string = e.data[1];
                    const script: string = e.data[2];
                    const seed: string = e.data[3];
                    const testTime: size_t = parseInt(e.data[4]);

                    importScripts(root + "/" + script);

                    const wtc: WorkerTestContext =
                          new WorkerTestContext(testTime,
                                                seed,
                                                statDist,
                                                postMessage);
                    test_verificatum(wtc);
                }
            };
            /* eslint-enable @typescript-eslint/explicit-function-return-type */
        };

        /**
         * Testing and timing functions.
         */

        function rs(seed: string): RandomSource {
            const randomSource: SHA256PRG = new SHA256PRG();
            const seedBytes: uint8_t[] = asciiToByteArray(seed);
            randomSource.setSeed(seedBytes);

            return randomSource;
        }

        export class WorkerTestContext extends TestContext {

            postMessage: (x: any) => void;

            /**
             * Creates a context with a given random source.
             *
             * @param testTime - Regulates the running time of testing.
             * @param randomSource - Source of randomness.
             * @param statDist - Statistical distance.
             */
            constructor(testTime: size_t,
                        seed: string,
                        statDist: size_t,
                        postMessage: (x: any) => void) {
                super(testTime, rs(seed), statDist);
                this.postMessage = postMessage;
            }

            write(s: string): void {
                postMessage([s]);
            }

            writenl(s: string): void {
                postMessage([s + "<br>"]);
            }

            /**
             * Exit aggressively.
             */
            exit(exitCode: int32_t): void {
                postMessage(["exitCode = " + exitCode]);
                self.close();
            }
        }

    }
}

